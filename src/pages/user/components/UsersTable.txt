import { FC, ChangeEvent, useState } from 'react';
import PropTypes from 'prop-types';
import {
  Tooltip,
  Divider,
  Box,
  FormControl,
  InputLabel,
  Card,
  Checkbox,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TablePagination,
  TableRow,
  TableContainer,
  Select,
  MenuItem,
  Typography,
  useTheme,
  CardHeader,
} from '@mui/material';

import Label from '../../../components/Label';
import EditTwoToneIcon from '@mui/icons-material/EditTwoTone';
import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';
import BulkActions from './BulkActions';
import UserApi from '../../../apis/user/UserApi';
import { queryKeys } from '../../../utils/constants';
import { useQuery } from '@tanstack/react-query';
import { User } from '../../../models/user';
import UserSettingApi from '../../../apis/user/UserSettingApi';

// interface Filters {
//   status?: IsActive;
// }

function useUsersQuery() {
  const { data } = useQuery([queryKeys.USERS], () => UserApi.getUsers(), {
    cacheTime: 5 * 1000 * 60,
    staleTime: 5 * 1000 * 60,
  });
  return data || [];
}
function useUserSettingQuery() {
  const { data } = useQuery([queryKeys.USERSETTING], () => UserSettingApi.getUserSetting(), {
    cacheTime: 5 * 1000 * 60,
    staleTime: 5 * 1000 * 60,
  });
  return data || [];
}

// const makeUserList = async () => {};

const getStatusLabel = (IsActive: boolean): JSX.Element => {
  return IsActive ? <Label color="success">Active</Label> : <Label color="error">Inactive</Label>;
};

const applyFilters = (Users: User[], filters: any): User[] => {
  return Users.filter((user) => {
    const matches = true;

    // if (filters.status && user.status !== filters.status) {
    //   matches = false;
    // }

    return matches;
  });
};

const applyPagination = (Users: User[], page: number, limit: number): User[] => {
  return Users.slice(page * limit, page * limit + limit);
};

function UsersTabel() {
  // makeUserList();
  const users = useUsersQuery();

  users.map((user: any) => {
    user.account_count = 10;
  });

  console.log(users);

  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);
  const selectedBulkActions = selectedUsers.length > 0;
  const [page, setPage] = useState<number>(0);
  const [limit, setLimit] = useState<number>(5);
  const [filters, setFilters] = useState<any>({
    status: null,
  });

  const statusOptions = [
    {
      id: 'all',
      name: 'All',
    },
    {
      id: 'active',
    },
    {
      id: 'sfaff',
      name: 'staff',
    },
  ];

  const handleStatusChange = (e: any): void => {
    let value: any;

    if (e.target.value !== 'all') {
      value = e.target.value;
    }

    setFilters((prevFilters: any) => ({
      ...prevFilters,
      status: value,
    }));
  };

  const handleSelectAllUsers = (event: ChangeEvent<HTMLInputElement>): void => {
    setSelectedUsers(event.target.checked ? users.map((user: any) => user.id) : []);
  };

  const handleSelectOneUsers = (event: ChangeEvent<HTMLInputElement>, UsersId: string): void => {
    if (!selectedUsers.includes(UsersId)) {
      setSelectedUsers((prevSelected) => [...prevSelected, UsersId]);
    } else {
      setSelectedUsers((prevSelected) => prevSelected.filter((id) => id !== UsersId));
    }
  };

  const handlePageChange = (event: any, newPage: number): void => {
    setPage(newPage);
  };

  const handleLimitChange = (event: ChangeEvent<HTMLInputElement>): void => {
    setLimit(parseInt(event.target.value));
  };

  const filteredUsers = applyFilters(users, filters);
  const paginatedUsers = applyPagination(filteredUsers, page, limit);
  const selectedSomeUsers = selectedUsers.length > 0 && selectedUsers.length < users.length;
  const selectedAllUsers = selectedUsers.length === users.length;
  const theme = useTheme();

  return (
    <Card>
      {selectedBulkActions && (
        <Box flex={1} p={2}>
          <BulkActions />
        </Box>
      )}
      {!selectedBulkActions && (
        <CardHeader
          action={
            <Box width={150}>
              <FormControl fullWidth variant="outlined">
                <InputLabel>정렬</InputLabel>
                <Select
                  value={filters.status || 'all'}
                  onChange={handleStatusChange}
                  label="Status"
                  autoWidth
                >
                  {statusOptions.map((statusOption) => (
                    <MenuItem key={statusOption.id} value={statusOption.id}>
                      {statusOption.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Box>
          }
          title="유저 목록"
        />
      )}
      <Divider />
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell padding="checkbox">
                <Checkbox
                  color="primary"
                  checked={selectedAllUsers}
                  indeterminate={selectedSomeUsers}
                  onChange={handleSelectAllUsers}
                />
              </TableCell>
              <TableCell>고객명</TableCell>
              <TableCell>보유중인 계좌수</TableCell>
              <TableCell>이메일 주소</TableCell>
              <TableCell>성별코드</TableCell>
              <TableCell>생년월일</TableCell>
              <TableCell>휴대폰 번호</TableCell>
              <TableCell>최근로그인</TableCell>
              <TableCell>혜택 수신 동의 여부</TableCell>
              <TableCell>활성화 여부</TableCell>
              <TableCell>가입일</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {paginatedUsers.map((user) => {
              const isUsersSelected = selectedUsers.includes(user.id);
              return (
                <TableRow hover key={user.id} selected={isUsersSelected}>
                  <TableCell padding="checkbox">
                    <Checkbox
                      color="primary"
                      checked={isUsersSelected}
                      onChange={(event: ChangeEvent<HTMLInputElement>) =>
                        handleSelectOneUsers(event, user.id)
                      }
                      value={isUsersSelected}
                    />
                  </TableCell>
                  <TableCell>
                    <Typography
                      variant="body1"
                      fontWeight="bold"
                      color="text.primary"
                      gutterBottom
                      noWrap
                    >
                      {user.name}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography
                      variant="body1"
                      fontWeight="bold"
                      color="text.primary"
                      gutterBottom
                      noWrap
                    >
                      {user.account_count}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography
                      variant="body1"
                      fontWeight="bold"
                      color="text.primary"
                      gutterBottom
                      noWrap
                    >
                      {user.email}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography
                      variant="body1"
                      fontWeight="bold"
                      color="text.primary"
                      gutterBottom
                      noWrap
                    >
                      {user.gender_origin}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography
                      variant="body1"
                      fontWeight="bold"
                      color="text.primary"
                      gutterBottom
                      noWrap
                    >
                      {user.birth_date.substring(0, 10)}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography
                      variant="body1"
                      fontWeight="bold"
                      color="text.primary"
                      gutterBottom
                      noWrap
                    >
                      {user.phone_number}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography
                      variant="body1"
                      fontWeight="bold"
                      color="text.primary"
                      gutterBottom
                      noWrap
                    >
                      {user.last_login.substring(0, 10)}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography
                      variant="body1"
                      fontWeight="bold"
                      color="text.primary"
                      gutterBottom
                      noWrap
                    >
                      true
                    </Typography>
                  </TableCell>
                  <TableCell align="right">
                    <Typography
                      variant="body1"
                      fontWeight="bold"
                      color="text.primary"
                      gutterBottom
                      noWrap
                    >
                      false
                    </Typography>
                  </TableCell>
                  <TableCell align="right">
                    <Tooltip title="Edit Order" arrow>
                      <IconButton
                        sx={{
                          '&:hover': {
                            background: theme.colors.primary.lighter,
                          },
                          color: theme.palette.primary.main,
                        }}
                        color="inherit"
                        size="small"
                      >
                        <EditTwoToneIcon fontSize="small" />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="Delete Order" arrow>
                      <IconButton
                        sx={{
                          '&:hover': { background: theme.colors.error.lighter },
                          color: theme.palette.error.main,
                        }}
                        color="inherit"
                        size="small"
                      >
                        <DeleteTwoToneIcon fontSize="small" />
                      </IconButton>
                    </Tooltip>
                  </TableCell>
                </TableRow>
              );
            })}
          </TableBody>
        </Table>
      </TableContainer>
      <Box p={2}>
        <TablePagination
          component="div"
          count={filteredUsers.length}
          onPageChange={handlePageChange}
          onRowsPerPageChange={handleLimitChange}
          page={page}
          rowsPerPage={limit}
          rowsPerPageOptions={[5, 10, 25, 30]}
        />
      </Box>
    </Card>
  );
}

UsersTabel.propTypes = {
  Users: PropTypes.array.isRequired,
};

UsersTabel.defaultProps = {
  Users: [],
};

export default UsersTabel;
